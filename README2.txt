Our parking garage automation consists of 3 subsystems: Mobile App, Manager Website, Scanner GUI

The mobile android app, named ZippyPark will have to be downloaded for the unit testing. From here the first screen has a login option for those that already have an account or a sign up option for new users. If you don't have an account you can click the "Sign Up" button which will direct you to the next screen that will require you to input your necessary personal information, payment information and car details. And now the user will be available in our database. After that you will be directed to a menu screen where you can select the action you want to perform. For our unit testing we will be creating a reservation. From the home menu you can click the "Current Reservations" button which will direct you to a screen where you will be asked the date, starting time and ending time and then you can click the "Create Reservation" button and your reservation will be created. From there you will be directed back to the home menu page and the reservation will be created in the database as well identified by the user barcode. If the customer wants to see their current reservations they can click the "Current Reservations" button from the home menu screen and be directed to a list of all of their upcoming reservations. Also, if the user wants to see their past reservations they can click on the "Reservation History" button from the home menu screen and will be directed to a screen that displays their past reservations.


The setup to access the manager website you first have to SSH into the remote server using a Linux/Unix based terminal(Putty) and typing "ssh[netid]@coewww.rutgers.edu" and hitting enter. Once you press yes to continue you can enter using your engineering username and password. To view the website you have to cd into "/www/custom/zippypark/ZippyPark", then type node server.js (you may get an error if express is not installed already), from there you can go to "zippypark.rutgers.edu" and be directed to the website. Then you have to run "npm install" to install all needed modules. Then run "npm start" or "node server.js". The unit testing will focus on being able to create and edit reservations and delete user accounts. You are going to be directed to the home page. From there we can select the "Customers" tab which will direct us to the customer information page. From here a list of all the existing users that are present on the database. Right next to each user there is a button available, "Delete". With this button the managers are able to delete their account if they are inactive. There is also a "Add Customer" button at the bottom of the page which directs the customer to a page with a form. The form has to be filled out completely for all the fields in the proper way. After this the new customer will be added in the database. Another tab on the website is "Reservations". A list of current reservations are displayed on this page with 2 buttons next to each reservation: "Edit" and "Delete". The "Edit" button will allow the managers to change the information about a user's reservation which will be updated in the database and the "Delete" button will delete the reservation by taking it out of the database.


The scanner GUI is the “hardware” part of our system. When the customer first enters the elevator the license plate of the user is scanned and checked against the database for the matching user account. If the account exists, the time entered will be recorded and the database will be searched if a reservation exists or not. If the account doesn't exist the garage cannot allow the customer to enter. If a reservation exists, the customer is taken to an unoccupied parking spot only available for reservations and the status for that parking spot is updated to "Occupied". If there is no reservation found then the user will be directed to an unoccupied parking spot designated for walk-ins and the status of that parking spot is updated to "Occupied". If the walk-in floor is full then the customer would be provided with a message saying to "come back at a later time". When the customer leaves the license plate is scanned again along with the leaving time recorded and the parking spot they were at is changed to "Unoccupied". The license plate is once again matched with a user account and checked against the database if a reservation exists or not. If it was a reservation, then the time left is recorded in the database and it is compared to the time the customer is supposed to leave to check for tardiness. If the customer leaves after the designated time then they will be charged an overtime rate. If the customer is a walk-in then the time left is recorded in the database, the customer is charged accordingly and the parking spot is changed to "Unoccupied".


Actual unit testing code is not needed since the manual steps for testing each use case for the subsystems are thoroughly described above.
